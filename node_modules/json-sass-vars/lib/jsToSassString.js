'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _lodash = require('lodash.isplainobject');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isArray = Array.isArray;


function jsToSassString(value) {

  function _jsToSassString(value) {
    var initialIndentLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    var indentLevel = initialIndentLevel;

    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
      case 'boolean':
      case 'number':
        return value.toString();
      case 'string':
        return value;
      case 'object':
        if ((0, _lodash2.default)(value)) {
          indentLevel += 1;
          var indent = indentsToSpaces(indentLevel);

          var jsObj = value;
          var sassKeyValPairs = [];

          sassKeyValPairs = Object.keys(jsObj).reduce(function (result, key) {
            var jsVal = jsObj[key];
            var sassVal = _jsToSassString(jsVal, indentLevel);

            if (isNotUndefined(sassVal)) {
              result.push(key + ': ' + sassVal);
            }

            return result;
          }, []);

          var result = '(\n' + (indent + sassKeyValPairs.join(',\n' + indent)) + '\n' + indentsToSpaces(indentLevel - 1) + ')';
          indentLevel -= 1;
          return result;
        } else if (isArray(value)) {
          var sassVals = value.map(function (v) {
            if (isNotUndefined(v)) {
              return _jsToSassString(v, indentLevel);
            }
          }).filter(Boolean);

          return '(' + sassVals.join(', ') + ')';
        } else if (isNull(value)) return 'null';else return value.toString();
      default:
        return;
    }
  }

  return _jsToSassString(value);
}

function indentsToSpaces(indentCount) {
  return Array(indentCount + 1).join('  ');
}

function isNull(value) {
  return value === null;
}

function isNotUndefined(value) {
  return typeof value !== 'undefined';
}

exports.default = jsToSassString;